---
    Description: CloudFormation template for creating an ec2 instance
    Parameters:
      KeyName:
       Description: "keyPair Name"
       Type: AWS::EC2::KeyPair::KeyName
       ConstraintDescription: "Must be the name of an existing EC2 KeyPair"
       Default: "KeyPairDMZ"
      InstanceType:
        Description: "Select one of the possible instance types"
        Type: String
        Default: t2.micro
        AllowedValues:
        - t2.micro
        - t2.small
        - t2.medium
    Resources:
      VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: 172.31.0.0/16
          EnableDnsSupport: true
          EnableDnsHostnames: true
          InstanceTenancy: default
      InternetGateway:
        Type: AWS::EC2::InternetGateway
      VPCGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway
      SubnetA:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          CidrBlock: 172.31.0.0/20
          MapPublicIpOnLaunch: true
      RouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
          VpcId: !Ref VPC
      InternetRoute:
        Type: AWS::EC2::Route
        DependsOn: VPCGatewayAttachment
        Properties:
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
          RouteTableId: !Ref RouteTable
      SubnetARouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
          RouteTableId: !Ref RouteTable
          SubnetId: !Ref SubnetA
      SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupName: "Internet Group"
          GroupDescription: "SSH + http traffic in, all traffic out."
          VpcId: !Ref VPC
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: '22'
              ToPort: '22'
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 12127
              ToPort: 12128
              CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
            - IpProtocol: -1
              CidrIp: 0.0.0.0/0
      EC2Instance:
        Type: AWS::EC2::Instance
        Properties:
          ImageId: "ami-09d95fab7fff3776c"
          InstanceType: !Ref InstanceType
          KeyName: !Ref KeyName
          NetworkInterfaces:
            - GroupSet:
                - !Ref SecurityGroup
              SubnetId: !Ref SubnetA
              AssociatePublicIpAddress: true
              DeviceIndex: "0"
              DeleteOnTermination: 'true'
           UserData: !Base64 |
            #!/bin/bash
            apt-get update -qq
            apt-get install -y apt-transport-https ca-certificates
            apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
            echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | tee /etc/apt/sources.list.d/docker.list
            apt-get update -qq
            apt-get purge lxc-docker || true
            apt-get -y install linux-image-extra-$(uname -r) linux-image-extra-virtual
            apt-get -y install docker-engine
            usermod -aG docker ubuntu
            mkdir -p /etc/systemd/system/docker.service.d
            printf "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375\n" >>  /etc/systemd/system/docker.service.d/docker.conf
            systemctl daemon-reload
            systemctl restart docker
           
      